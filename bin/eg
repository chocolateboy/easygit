#!/usr/bin/env perl

use Modern::Perl;
use Getopt::Long;
use Cwd qw(getcwd abs_path);
use List::Util qw(max);
use File::Temp qw(tempfile);

use EasyGit::Subcommand;
use EasyGit::Util;
use EasyGit::ExecUtil;

# configurables
my $DEBUG   = $ENV{EASYGIT_DEBUG}   || 0;
my $GIT_CMD = $ENV{EASYGIT_GIT_CMD} || "git"; # Includes any global args, thus "git --exec-path=..."
my $USE_PAGER = exists($ENV{EASYGIT_USE_PAGER}) ? $ENV{EASYGIT_USE_PAGER} : -1;

# globals
my %ALIAS;
my %COMMAND; # command=>{ section, short_description } mapping
my ($CURDIR, $TOPDIR, $GITDIR);
my $EG_EXEC = abs_path($0);
my $OUTFH;
my $VERSION = "1.7.0.4.dev";
my $SECTION = {
    'creation' =>
      { order => 1,
        desc => 'Creating repositories',
      },
    'discovery' =>
      { order => 2,
        desc => 'Obtaining information about changes, history, & state',
      },
    'modification' =>
      { order => 3,
        desc => 'Making, undoing, or recording changes',
      },
    'projects' =>
      { order => 4,
        desc => 'Managing branches',
      },
    'collaboration' =>
      { order => 5,
        desc => 'Collaboration'
      },
    'timesavers' =>
      { order => 6,
        desc => 'Time saving commands'
      },
    'compatibility' =>
      { order => 7,
        extra => 1,
        desc  => 'Commands provided solely for compatibility with other ' .
          'prominent SCMs'
      },
    'misc' =>
      { order => 8,
        extra => 1,
        desc  => 'Miscellaneous'
      },
};

## Commands to list in help even though we haven't overridden the git versions
## (yet, in most cases)
INIT {
    %COMMAND = (
        blame => {
            unmodified_help     => 1,
            unmodified_behavior => 1,
            extra               => 1,
            section             => 'discovery',
            about               => 'Show what version and author last modified each line of a file'
        },
        bisect => {
            unmodified_help     => 1,
            unmodified_behavior => 1,
            section             => 'timesavers',
            about               => 'Find the change that introduced a bug by binary search'
        },
        grep => {
            unmodified_help     => 1,
            unmodified_behavior => 1,
            extra               => 1,
            section             => 'discovery',
            about               => 'Print lines of known files matching a pattern'
        },
        mv => {
            unmodified_help     => 1,
            unmodified_behavior => 1,
            section             => 'modification',
            about               => 'Move or rename files (or directories or symlinks)'
        },
    );
}

sub launch ($) {
    my $job = shift;
    $job = $ALIAS{$job} || $job;
    my $orig_job = $job;
    $job =~ s/-/_/; # Packages must have underscores, commands often have dashes

    # Create the action to execute
    my $action;
    $action = $job->new() if $job->can('new');
    $action = EasyGit::Subcommand->new(command => $orig_job) unless $job->can('new');
    my $ret;

    # preprocess
    if ($action->can('preprocess')) {
        # Do not skip commands normally executed during the preprocess stage,
        # since they just gather data.
        EasyGit::Util::push_debug(new_value => $DEBUG ? 1 : 0);

        print ">>Stage: Preprocess<<\n" if $DEBUG;
        $action->preprocess();

        EasyGit::Util::pop_debug();
    }

    # run & postprocess
    if ($action->can("postprocess")) {
        my $output = "";
        open($OUTFH, '>', \$output) || die "eg $job: cannot open \$OUTFH: $!";
        print ">>Stage: Run<<\n" if $DEBUG;
        $ret = $action->run();
        print ">>Stage: Postprocess<<\n" if $DEBUG;
        $action->postprocess($output);
    } else {
        print ">>Stage: Run<<\n" if $DEBUG;
        $ret = $action->run();
    }

    # wrapup
    if ($action->can("wrapup")) {
        say '>>Stage: Wrapup<<' if $DEBUG;
        $action->wrapup();
    }

    $ret ||= 0;
    exit $ret;
}

sub version () {
    my $version_obj = "version"->new();
    $version_obj->run();
    exit 0;
}

# User gave invalid input; print an error_message, then show command usage
sub help (;$) {
    my $error_message = shift;
    my %extra_args;

    # Clear out any arguments so that help object doesn't think we asked for
    # a specific help topic.
    @ARGV = ();

    # Print any error message we were given
    if (defined $error_message) {
        print STDERR "$error_message\n\n";
        $extra_args{exit_status} = 1;
    }

    # Now show help.
    my $help_obj = "help"->new(%extra_args);
    $help_obj->run();
}

sub main () {
    # Get any global options
    Getopt::Long::Configure("no_bundling", "no_permute",
        "pass_through", "no_auto_abbrev", "no_ignore_case");
    my @global_args = ();
    my $record_arg  = sub { push(@global_args, "--$_[0]"); };
    my $record_args = sub { push(@global_args, "--$_[0]=$_[1]"); };
    my $result      = GetOptions(
        "--debug"     => sub { $DEBUG = 1 },
        "--help"      => sub { help() },
        "--translate" => sub { $DEBUG = 2 },
        "--version"   => sub { version() },
        "exec-path:s" => sub { $_[1] ? &$record_args(@_)
              : &$record_arg(@_); },
        "paginate|p" => sub { $USE_PAGER = 1; &$record_arg(@_) },
        "no-pager"   => sub { $USE_PAGER = 0; &$record_arg(@_) },
        "bare"       => sub { &$record_arg(@_) },
        "git-dir=s"  => sub { &$record_args(@_) },
        "work-tree=s"        => sub { &$record_args(@_) },
        "no-replace-objects" => sub { &$record_arg(@_) },
    );

    # Make sure all global args are passed to eg subprocesses as well...
    @global_args = EasyGit::Util::quote_args(@global_args);
    $GIT_CMD .= " @global_args";
    $EG_EXEC .= " @global_args" if @global_args;

    # Fix the environment, if needed (eg testsuite invokes eg via 'git', but
    # eg needs to be able to call the real git).
    # WARNING: This does not handle mutual recursion (eg in PATH twice as 'git')
    if ($0 =~ m#(.*)/git$#) {
        my $baddir = $1;
        my @newpaths = grep { $_ ne $baddir } split(/:/, $ENV{PATH});
        $ENV{PATH} = join(':', @newpaths);
    }

    # Sanity check the arguments
    exit EasyGit::ExecUtil::execute($GIT_CMD) if $GIT_CMD =~ m#--exec-path$#;
    die "eg: Error parsing arguments. (Try 'eg help')\n" if !$result;
    die "eg: No subcommand specified. (Try 'eg help')\n" if @ARGV < 1;
    die "eg: Invalid argument '$ARGV[0]'. (Try 'eg help')\n"
        if ($ARGV[0] !~ m#^[a-z]#);

    # Now execute the action
    my $action = shift @ARGV;
    launch($action);
}

main();
